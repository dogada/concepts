/*
** DON'T EDIT THIS FILE **
It's been generated by Zapatos (v3.5.0), and is liable to be overwritten

Zapatos: https://jawj.github.io/zapatos/
Copyright (C) 2020 George MacKerron
Released under the MIT licence: see LICENCE file
*/

declare module 'zapatos/schema' {

  import type * as db from 'zapatos/db';

  // got a type error on schemaVersionCanary below? update by running `npx zapatos`
  export interface schemaVersionCanary extends db.SchemaVersionCanary { version: 101 }

  /* === schema: public === */

  /* --- enums --- */


  /* --- tables --- */

  export namespace things {
    export type Table = 'things';
    export interface Selectable {
      /**
      * **things.id**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      id: string;
      /**
      * **things.type**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      type: string;
      /**
      * **things.slug**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      slug: string;
      /**
      * **things.content**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      content: string;
      /**
      * **things.creatorId**
      * - `varchar` in database
      * - Nullable, no default
      */
      creatorId: string | null;
      /**
      * **things.created**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      created: Date;
      /**
      * **things.updated**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      updated: Date;
      /**
      * **things.parentId**
      * - `varchar` in database
      * - Nullable, no default
      */
      parentId: string | null;
      /**
      * **things.isPublic**
      * - `bool` in database
      * - Nullable, no default
      */
      isPublic: boolean | null;
      /**
      * **things.data**
      * - `jsonb` in database
      * - Nullable, no default
      */
      data: db.JSONValue | null;
    }
    export interface JSONSelectable {
      /**
      * **things.id**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      id: string;
      /**
      * **things.type**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      type: string;
      /**
      * **things.slug**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      slug: string;
      /**
      * **things.content**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      content: string;
      /**
      * **things.creatorId**
      * - `varchar` in database
      * - Nullable, no default
      */
      creatorId: string | null;
      /**
      * **things.created**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      created: db.DateString;
      /**
      * **things.updated**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      updated: db.DateString;
      /**
      * **things.parentId**
      * - `varchar` in database
      * - Nullable, no default
      */
      parentId: string | null;
      /**
      * **things.isPublic**
      * - `bool` in database
      * - Nullable, no default
      */
      isPublic: boolean | null;
      /**
      * **things.data**
      * - `jsonb` in database
      * - Nullable, no default
      */
      data: db.JSONValue | null;
    }
    export interface Whereable {
      /**
      * **things.id**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **things.type**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      type?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **things.slug**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      slug?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **things.content**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      content?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **things.creatorId**
      * - `varchar` in database
      * - Nullable, no default
      */
      creatorId?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **things.created**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      created?: (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **things.updated**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      updated?: (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **things.parentId**
      * - `varchar` in database
      * - Nullable, no default
      */
      parentId?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **things.isPublic**
      * - `bool` in database
      * - Nullable, no default
      */
      isPublic?: boolean | db.Parameter<boolean> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, boolean | db.Parameter<boolean> | db.SQLFragment | db.ParentColumn>;
      /**
      * **things.data**
      * - `jsonb` in database
      * - Nullable, no default
      */
      data?: db.JSONValue | db.Parameter<db.JSONValue> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, db.JSONValue | db.Parameter<db.JSONValue> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **things.id**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      id: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **things.type**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      type: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **things.slug**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      slug: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **things.content**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      content: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **things.creatorId**
      * - `varchar` in database
      * - Nullable, no default
      */
      creatorId?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
      /**
      * **things.created**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      created?: (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | db.DefaultType | db.SQLFragment;
      /**
      * **things.updated**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      updated?: (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | db.DefaultType | db.SQLFragment;
      /**
      * **things.parentId**
      * - `varchar` in database
      * - Nullable, no default
      */
      parentId?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
      /**
      * **things.isPublic**
      * - `bool` in database
      * - Nullable, no default
      */
      isPublic?: boolean | db.Parameter<boolean> | null | db.DefaultType | db.SQLFragment;
      /**
      * **things.data**
      * - `jsonb` in database
      * - Nullable, no default
      */
      data?: db.JSONValue | db.Parameter<db.JSONValue> | null | db.DefaultType | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **things.id**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      id?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **things.type**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      type?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **things.slug**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      slug?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **things.content**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      content?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **things.creatorId**
      * - `varchar` in database
      * - Nullable, no default
      */
      creatorId?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **things.created**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      created?: (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | db.DefaultType | db.SQLFragment>;
      /**
      * **things.updated**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      updated?: (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | db.DefaultType | db.SQLFragment>;
      /**
      * **things.parentId**
      * - `varchar` in database
      * - Nullable, no default
      */
      parentId?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **things.isPublic**
      * - `bool` in database
      * - Nullable, no default
      */
      isPublic?: boolean | db.Parameter<boolean> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, boolean | db.Parameter<boolean> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **things.data**
      * - `jsonb` in database
      * - Nullable, no default
      */
      data?: db.JSONValue | db.Parameter<db.JSONValue> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, db.JSONValue | db.Parameter<db.JSONValue> | null | db.DefaultType | db.SQLFragment>;
    }
    export type UniqueIndex = 'things_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = db.GenericSQLExpression | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Table | Whereable | Column;
    export type SQL = SQLExpression | SQLExpression[];
  }

  export namespace uaccounts {
    export type Table = 'uaccounts';
    export interface Selectable {
      /**
      * **uaccounts.id**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      id: string;
      /**
      * **uaccounts.userId**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      userId: string;
      /**
      * **uaccounts.provider**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      provider: string;
      /**
      * **uaccounts.providerId**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      providerId: string;
      /**
      * **uaccounts.name**
      * - `varchar` in database
      * - Nullable, no default
      */
      name: string | null;
      /**
      * **uaccounts.data**
      * - `jsonb` in database
      * - `NOT NULL`, default: `'{}'::jsonb`
      */
      data: db.JSONValue;
      /**
      * **uaccounts.created**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      created: Date;
      /**
      * **uaccounts.updated**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      updated: Date;
    }
    export interface JSONSelectable {
      /**
      * **uaccounts.id**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      id: string;
      /**
      * **uaccounts.userId**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      userId: string;
      /**
      * **uaccounts.provider**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      provider: string;
      /**
      * **uaccounts.providerId**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      providerId: string;
      /**
      * **uaccounts.name**
      * - `varchar` in database
      * - Nullable, no default
      */
      name: string | null;
      /**
      * **uaccounts.data**
      * - `jsonb` in database
      * - `NOT NULL`, default: `'{}'::jsonb`
      */
      data: db.JSONValue;
      /**
      * **uaccounts.created**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      created: db.DateString;
      /**
      * **uaccounts.updated**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      updated: db.DateString;
    }
    export interface Whereable {
      /**
      * **uaccounts.id**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **uaccounts.userId**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      userId?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **uaccounts.provider**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      provider?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **uaccounts.providerId**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      providerId?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **uaccounts.name**
      * - `varchar` in database
      * - Nullable, no default
      */
      name?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **uaccounts.data**
      * - `jsonb` in database
      * - `NOT NULL`, default: `'{}'::jsonb`
      */
      data?: db.JSONValue | db.Parameter<db.JSONValue> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, db.JSONValue | db.Parameter<db.JSONValue> | db.SQLFragment | db.ParentColumn>;
      /**
      * **uaccounts.created**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      created?: (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **uaccounts.updated**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      updated?: (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **uaccounts.id**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      id: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **uaccounts.userId**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      userId: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **uaccounts.provider**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      provider: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **uaccounts.providerId**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      providerId: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **uaccounts.name**
      * - `varchar` in database
      * - Nullable, no default
      */
      name?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
      /**
      * **uaccounts.data**
      * - `jsonb` in database
      * - `NOT NULL`, default: `'{}'::jsonb`
      */
      data?: db.JSONValue | db.Parameter<db.JSONValue> | db.DefaultType | db.SQLFragment;
      /**
      * **uaccounts.created**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      created?: (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | db.DefaultType | db.SQLFragment;
      /**
      * **uaccounts.updated**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      updated?: (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | db.DefaultType | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **uaccounts.id**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      id?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **uaccounts.userId**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      userId?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **uaccounts.provider**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      provider?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **uaccounts.providerId**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      providerId?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **uaccounts.name**
      * - `varchar` in database
      * - Nullable, no default
      */
      name?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **uaccounts.data**
      * - `jsonb` in database
      * - `NOT NULL`, default: `'{}'::jsonb`
      */
      data?: db.JSONValue | db.Parameter<db.JSONValue> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, db.JSONValue | db.Parameter<db.JSONValue> | db.DefaultType | db.SQLFragment>;
      /**
      * **uaccounts.created**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      created?: (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | db.DefaultType | db.SQLFragment>;
      /**
      * **uaccounts.updated**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      updated?: (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | db.DefaultType | db.SQLFragment>;
    }
    export type UniqueIndex = 'uaccounts_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = db.GenericSQLExpression | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Table | Whereable | Column;
    export type SQL = SQLExpression | SQLExpression[];
  }

  export namespace users {
    export type Table = 'users';
    export interface Selectable {
      /**
      * **users.id**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      id: string;
      /**
      * **users.name**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      name: string;
      /**
      * **users.nickname**
      * - `varchar` in database
      * - Nullable, no default
      */
      nickname: string | null;
      /**
      * **users.active**
      * - `bool` in database
      * - Nullable, no default
      */
      active: boolean | null;
      /**
      * **users.created**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      created: Date;
      /**
      * **users.updated**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      updated: Date;
      /**
      * **users.roles**
      * - `jsonb` in database
      * - `NOT NULL`, default: `'[]'::jsonb`
      */
      roles: db.JSONValue;
      /**
      * **users.data**
      * - `jsonb` in database
      * - `NOT NULL`, default: `'{}'::jsonb`
      */
      data: db.JSONValue;
    }
    export interface JSONSelectable {
      /**
      * **users.id**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      id: string;
      /**
      * **users.name**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      name: string;
      /**
      * **users.nickname**
      * - `varchar` in database
      * - Nullable, no default
      */
      nickname: string | null;
      /**
      * **users.active**
      * - `bool` in database
      * - Nullable, no default
      */
      active: boolean | null;
      /**
      * **users.created**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      created: db.DateString;
      /**
      * **users.updated**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      updated: db.DateString;
      /**
      * **users.roles**
      * - `jsonb` in database
      * - `NOT NULL`, default: `'[]'::jsonb`
      */
      roles: db.JSONValue;
      /**
      * **users.data**
      * - `jsonb` in database
      * - `NOT NULL`, default: `'{}'::jsonb`
      */
      data: db.JSONValue;
    }
    export interface Whereable {
      /**
      * **users.id**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **users.name**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      name?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **users.nickname**
      * - `varchar` in database
      * - Nullable, no default
      */
      nickname?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **users.active**
      * - `bool` in database
      * - Nullable, no default
      */
      active?: boolean | db.Parameter<boolean> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, boolean | db.Parameter<boolean> | db.SQLFragment | db.ParentColumn>;
      /**
      * **users.created**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      created?: (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **users.updated**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      updated?: (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **users.roles**
      * - `jsonb` in database
      * - `NOT NULL`, default: `'[]'::jsonb`
      */
      roles?: db.JSONValue | db.Parameter<db.JSONValue> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, db.JSONValue | db.Parameter<db.JSONValue> | db.SQLFragment | db.ParentColumn>;
      /**
      * **users.data**
      * - `jsonb` in database
      * - `NOT NULL`, default: `'{}'::jsonb`
      */
      data?: db.JSONValue | db.Parameter<db.JSONValue> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, db.JSONValue | db.Parameter<db.JSONValue> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **users.id**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      id: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **users.name**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      name: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **users.nickname**
      * - `varchar` in database
      * - Nullable, no default
      */
      nickname?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
      /**
      * **users.active**
      * - `bool` in database
      * - Nullable, no default
      */
      active?: boolean | db.Parameter<boolean> | null | db.DefaultType | db.SQLFragment;
      /**
      * **users.created**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      created?: (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | db.DefaultType | db.SQLFragment;
      /**
      * **users.updated**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      updated?: (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | db.DefaultType | db.SQLFragment;
      /**
      * **users.roles**
      * - `jsonb` in database
      * - `NOT NULL`, default: `'[]'::jsonb`
      */
      roles?: db.JSONValue | db.Parameter<db.JSONValue> | db.DefaultType | db.SQLFragment;
      /**
      * **users.data**
      * - `jsonb` in database
      * - `NOT NULL`, default: `'{}'::jsonb`
      */
      data?: db.JSONValue | db.Parameter<db.JSONValue> | db.DefaultType | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **users.id**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      id?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **users.name**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      name?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **users.nickname**
      * - `varchar` in database
      * - Nullable, no default
      */
      nickname?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **users.active**
      * - `bool` in database
      * - Nullable, no default
      */
      active?: boolean | db.Parameter<boolean> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, boolean | db.Parameter<boolean> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **users.created**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      created?: (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | db.DefaultType | db.SQLFragment>;
      /**
      * **users.updated**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      updated?: (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | db.DefaultType | db.SQLFragment>;
      /**
      * **users.roles**
      * - `jsonb` in database
      * - `NOT NULL`, default: `'[]'::jsonb`
      */
      roles?: db.JSONValue | db.Parameter<db.JSONValue> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, db.JSONValue | db.Parameter<db.JSONValue> | db.DefaultType | db.SQLFragment>;
      /**
      * **users.data**
      * - `jsonb` in database
      * - `NOT NULL`, default: `'{}'::jsonb`
      */
      data?: db.JSONValue | db.Parameter<db.JSONValue> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, db.JSONValue | db.Parameter<db.JSONValue> | db.DefaultType | db.SQLFragment>;
    }
    export type UniqueIndex = 'users_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = db.GenericSQLExpression | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Table | Whereable | Column;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /* === cross-table types === */

  export type Table = things.Table | uaccounts.Table | users.Table;
  export type Selectable = things.Selectable | uaccounts.Selectable | users.Selectable;
  export type JSONSelectable = things.JSONSelectable | uaccounts.JSONSelectable | users.JSONSelectable;
  export type Whereable = things.Whereable | uaccounts.Whereable | users.Whereable;
  export type Insertable = things.Insertable | uaccounts.Insertable | users.Insertable;
  export type Updatable = things.Updatable | uaccounts.Updatable | users.Updatable;
  export type UniqueIndex = things.UniqueIndex | uaccounts.UniqueIndex | users.UniqueIndex;
  export type Column = things.Column | uaccounts.Column | users.Column;
  export type AllTables = [things.Table, uaccounts.Table, users.Table];
  export type AllMaterializedViews = [];


  export type SelectableForTable<T extends Table> = {
    things: things.Selectable;
    uaccounts: uaccounts.Selectable;
    users: users.Selectable;
  }[T];

  export type JSONSelectableForTable<T extends Table> = {
    things: things.JSONSelectable;
    uaccounts: uaccounts.JSONSelectable;
    users: users.JSONSelectable;
  }[T];

  export type WhereableForTable<T extends Table> = {
    things: things.Whereable;
    uaccounts: uaccounts.Whereable;
    users: users.Whereable;
  }[T];

  export type InsertableForTable<T extends Table> = {
    things: things.Insertable;
    uaccounts: uaccounts.Insertable;
    users: users.Insertable;
  }[T];

  export type UpdatableForTable<T extends Table> = {
    things: things.Updatable;
    uaccounts: uaccounts.Updatable;
    users: users.Updatable;
  }[T];

  export type UniqueIndexForTable<T extends Table> = {
    things: things.UniqueIndex;
    uaccounts: uaccounts.UniqueIndex;
    users: users.UniqueIndex;
  }[T];

  export type ColumnForTable<T extends Table> = {
    things: things.Column;
    uaccounts: uaccounts.Column;
    users: users.Column;
  }[T];

  export type SQLForTable<T extends Table> = {
    things: things.SQL;
    uaccounts: uaccounts.SQL;
    users: users.SQL;
  }[T];

}
